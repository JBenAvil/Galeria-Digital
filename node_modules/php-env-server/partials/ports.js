// GET net
const net = require("net");

function check(port, host = "localhost") {
    // RETURN PROMISE
    return new Promise((resolve, reject) => {
        // GET client
        const client = new net.Socket();

        function respond(status, message, error = false) {
            // CALL destroy
            client.destroy();

            // RESOLVE PROMISE
            resolve({ status, message, error });
        };

        // SETUP client
        client.connect(port, host, () => respond(false, `Port: ${port} is being used.`));
        client.on("error", (error) => {
            // GET status
            let status = error.code === "ECONNREFUSED";

            // CALL respond
            respond(status, status ? `Port: ${port} is free.` : `An error ocurred trying to check port: ${port}.`, status ? false : error);
        });
    });
};

// EXPORTS
exports = Object.assign(exports, {
    check,
    checkRange: (from, to, host = "localhost") => {
        // RETURN PROMISE
        return new Promise(async (resolve, reject) => {
            // CHECK VARIABLES
            if (to < from) throw new Error("The first port musn't be higher than the second.");

            // CREATE object
            let object = {};

            // FOR port
            for (let port = from; port < to; port++) object[port] = await check(port, host);

            // RESOLVE PROMISE
            resolve(object);
        });
    }
});